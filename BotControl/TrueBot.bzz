
### BUZZ FUNCTIONS ##

######################### function of log #########################

#vector to string
function vec2_str(v) {
	return string.concat("v: x=", string.tostring(v.x), " y=", string.tostring(v.y))
}

# print a table
function table_print(t) {
  foreach(t, function(key, value) {
    log(key, " -> ", value)
  })
}

# print a table of vector
function table_v_print(t) {
  foreach(t, function(key, value) {
      log(key, " -> ", vec2_str(value))
			debug.rays.add(255 ,0 , 255, value.x, value.y, 0.0)
    })
}

# Rads to degrees
function rtod(r) {
   return (r*(180.0/math.pi))
}

# Degrees to rads
function dtor(d) {
   return (math.pi*(d/180.0))
}

######################### function for vectors #########################

# setting a 2D vector from length and angle
function vec2_new_polar(length, angle) {
   return {.x = length * math.cos(angle), .y = length * math.sin(angle)}   
}

# Summing two 2D vectors (v1 = v1 + v2)
function vec2_sum(v1, v2) {
	 v1.x = v1.x + v2.x
   v1.y = v1.y + v2.y
}

# Difference for two 2D vector (v1 = v1 - v2)
function vec2_diff(v1, v2) {
	 v1.x = v1.x - v2.x
   v1.y = v1.y - v2.y
}

# Difference for two 2D vector with return
function vec2_sum_r(v1, v2) {
	return {.x = v1.x + v2.x, .y =  v1.y + v2.y}
}

# Summing two 2D vectors with return
function vec2_diff_r(v1, v2) {
	 return {.x = v1.x - v2.x, .y =  v1.y - v2.y}
}

# Getting the angle of a 2D vector
function vec2_angle(v) {
   return math.atan(v.y, v.x)
}

# Getting the length of a 2D vector
function vec2_length(v) {
	return math.sqrt((v.x * v.x) + (v.y * v.y))
}

######################### function for tables #########################

# Find the maximal value of a table
function maximun(distance) {
	max = 0
	foreach(distance, function(key, value) {
		if (value > max ) {
			max = value
		}
	})
	return max
}

# Find the minimal value of a table
function minimum(distance) {
	min = inf
	foreach(distance, function(key, value) {
		if (value < min ) {
			min = value
		}
	})
	return min
}

######################### function tables of vectors #########################

# find the mean value of a table of vector
function mean(points) {
	mean_vec = {.x = 0, .y = 0}
	foreach(points, function(rid, data) {
		vec2_sum(mean_vec, data)
	})
	return {.x = mean_vec.x / size(points), .y = mean_vec.y / size(points)}
}

######################### function for robots #########################
# Compte des voisins sans prendre en compte RID 0
function custom_count() {
	compteur = 0
	neighbors.foreach(function(rid, data) {
		if (rid != 0) {
			compteur = compteur +1
		}
	})
	return compteur
}


# marche aléatoire pour les robots
function random_move() {
	var maxDist = 0
	var maxAngle = 0
	var counter = 0
	while (counter < 8) {
		if ((proximity[counter].angle < 100 * math.pi / 180) and (proximity[counter].angle > -100*math.pi/180) and (proximity[counter].value > maxDist)) {
			maxDist = proximity[counter].value
			maxAngle = proximity[counter].angle
		}
		counter = counter + 1
	}
	if (maxDist > 0) {
		if (maxAngle > 0) {
			set_wheels(10.0,0.0)
		}
		else {
			set_wheels(0.0,10.0)
		}
	}
	else {
		set_wheels(10.0,10.0)
	}
}

# K-mean aglorithme for a robot on the non-kin
# return the clusters and the total distance of all point from the center of the cluster
function kmean(nb_cluster){

	# log("nb_cluster: ", nb_cluster)
	points = {}
	robots = {}

	rbt_counter = 0
	neighbors.nonkin().foreach(function(rid, data) {
		if (rid != 0) {
			# log("robot ", rid, ": ",
			# "distance  = ", data.distance, ", ",
			# "azimuth   = ", data.azimuth, ", ",
			# "elevation = ", data.elevation)

			robots[rbt_counter] = rid
			# log("le ", rbt_counter, " robot d'id: ", rid)
			rbt_counter = rbt_counter + 1
			points[rid] = vec2_new_polar(data.distance, data.azimuth)	
		}	
	})

	# log("points: ")
	# table_v_print(points)

	# log("robot id")
	# table_print(robots)

	i = 0
	center = {}
	cluster= {}

	while (i < nb_cluster) {
		cluster[i] = {}
		center[i] = points[robots[i]]
		i = i + 1
	}

	# log("centers: ")
	# table_v_print(center)

	# log("debut boucle while")

	counter_dist = 0
	distance_tot = 0

	while (counter_dist < 5) {
		distance_tot = 0
		foreach(points, function(id,pt) {

      # log("test du pt: ", id, " x:", pt.x, " y:", pt.y)
      var distance = {}
      i = 0
      while (i < nb_cluster) {
        distance[i] = vec2_length(vec2_diff_r(center[i], pt))
        # log("distance du ", i, " cluster au pt: ", distance[i])
        i = i + 1
      }
			# log("distance: ")
			# table_print(distance)

			min_distance = minimum(distance)
			# log("min distance: ")
      # log(min_distance)

			i = 0
      while ( i < nb_cluster) {
        if(distance[i] == min_distance) {
          # log("ajout du point ", id, " au cluster ",i)
					distance_tot = 	distance_tot + min_distance
          cluster[i][id] = pt
					# log("cluster ", i, " : ")
					# table_v_print(cluster[i])
        }
        i = i + 1
      }
    })
	counter_dist = counter_dist + 1

	}
	return {.distance = distance_tot, .clusters = cluster}
}

### Fonctions pour les chiens ###
# Mouvement des chiens (marche aleatoire pour le moment)
function d_move(threshold) {

	vec_obj = {.x = 0, .y = 0}
	
	neighbors.nonkin().foreach(function(rid, data) {
		if (rid == 0) {
			vec_obj = vec2_new_polar(data.distance, data.azimuth)	
		}	
	})
	log("objectif: ", vec2_str(vec_obj))

	if (custom_count() >= 2 and vec2_length(vec_obj) != 0) {
		nb_cluster = 1
  	distance = inf
		results = {}
		while (nb_cluster <= 4 and distance > 300) {
			results= kmean(nb_cluster)
			log("distance", results.distance)
			foreach(results.clusters, function (i, cluster) {
				#log("cluster ", i)
				#table_v_print(results.clusters[i])
			})
			
			nb_cluster = nb_cluster + 1
			distance = results.distance
		}

		# TODO comportement a partir des clusters
		# log("computation des centres de masses")
		clusters = results.clusters
		foreach(clusters, function (i, cluster) {
			clusters[i]["mass_center"] = mean(clusters[i])
			# log("cluster ", i)
			# table_v_print(results.clusters[i])
		})

		cluster_cible = clusters[0]
		foreach(clusters, function (i, cluster) {
			if (vec2_length(vec2_diff_r(vec_obj, clusters[i]["mass_center"])) > vec2_length(vec2_diff_r(vec_obj, cluster_cible["mass_center"]))) {
				cluster_cible = clusters[i]
			}
		})
		log("cluster_cible: ")
		table_v_print(cluster_cible)

		if (vec2_length( cluster_cible.mass_center) >= threshold * 1.1) {
			log("on rejoint le cluster")
			gotop(10, vec2_angle(cluster_cible.mass_center))
		}	else {
			log("on est a portée")
			ortho = {.x = 0, .y = 0}
			orhto1 = {.x = cluster_cible.mass_center.y, .y = -cluster_cible.mass_center.x}
			orhto2 = {.x = -cluster_cible.mass_center.y, .y = cluster_cible.mass_center.x}
			if (vec2_length(vec2_diff_r(vec_obj, orhto1)) > vec2_length(vec2_diff_r(vec_obj, orhto2))) {
				ortho = orhto1
			} else {
				ortho = orhto2
			}
			log("orthogonal", vec2_str(ortho))
			log("coef de col: ", vec_obj.x * cluster_cible.mass_center.y - vec_obj.y * cluster_cible.mass_center.x)
			if (math.abs(vec_obj.x * cluster_cible.mass_center.y - vec_obj.y * cluster_cible.mass_center.x) > 1000) {
				log("pas colinéaire ")
				gotop(10, vec2_angle(ortho))
			} else {
				log("colinéaire !!")				
				gotop(10, vec2_angle(vec_obj))
			} 
		}
	} else {
	random_move()
	}
}

### Fonctions pour les Moutons ###
# Fonction de mouvement du mouton (comportement)
function s_move(threshold) {
	# log("threshold: ", threshold)
	# calcul de l'angle de direction à prendre
	log("______________________", id)

	# if it's too close, we execute the avoidance algorihtme
  obstacle_vector = {.x=0.0, .y=0.0}
	mass_center = {.x=0.0, .y=0.0}
	dog_vector = {.x=0.0, .y=0.0}

	count_obs = 0
	count_mass_center = 0
	count_dog_vector = 0

	neighbors.kin().foreach(function(rid, data) {
		if ((data.distance <= threshold) and (rid != 0)) {
			vec2_sum(mass_center, vec2_new_polar(data.distance, data.azimuth))
			count_mass_center = count_mass_center + 1
		}
		if (data.distance <= 30) {
			vec2_sum(obstacle_vector, vec2_new_polar(data.distance, data.azimuth))
			count_obs = count_obs + 1
		}
	})
		
	neighbors.nonkin().foreach(function(rid, data) {
		if ((data.distance <= threshold) and (rid != 0)) {
			vec2_sum(dog_vector, vec2_new_polar(data.distance, data.azimuth))
			count_dog_vector = count_dog_vector + 1
		}
		if (data.distance <= 30) {
			vec2_sum(obstacle_vector, vec2_new_polar(data.distance, data.azimuth))
			count_obs = count_obs + 1
		}
	})
	
	if (count_obs != 0) {
		obstacle_vector = {.x=obstacle_vector.x / count_obs, .y=obstacle_vector.y / count_obs}
	}
	if (count_mass_center != 0) {
		mass_center = {.x=mass_center.x / count_mass_center, .y=mass_center.y / count_mass_center}
	}
	if (count_dog_vector != 0) {
		dog_vector = {.x=dog_vector.x / count_dog_vector, .y=dog_vector.y / count_dog_vector}
	}
	
	log(count_obs, " obstalces, ", count_mass_center, " voisins, ", count_dog_vector, " chien")

	escape_dog = {.x = 0.0, .y = 0.0}
	escape_obs = {.x = 0.0, .y = 0.0}

	var direction = {.x=0.0, .y=0.0}
	# if there is neighbors
  if (vec2_length(mass_center) != 0 or vec2_length(dog_vector) != 0) {
		# we determine the average  vector from the center of the herd and the wolf to get a natural behavior from the sheep,
		# he wants to get away from the dog, but stay with his herd.
		
		log("dog_vect x:", dog_vector.x, " y: ", dog_vector.y, " len: ", vec2_length(dog_vector))
		log("mass_center x:", mass_center.x, " y: ", mass_center.y, " len: ", vec2_length(mass_center))

		# if we see the dog, we get away from it, by adding the opposite vector to the direction vector
		
		# if the dog is visible
		if (vec2_length(dog_vector) != 0) {
			# and if other sheep are visible
			if (vec2_length(mass_center) != 0) {
				# We compute a excape vector, of the opposite direction of the dog
				# we make sure that the closer the dog is, the bigger the escape vector will be
				escape_dog = vec2_new_polar( vec2_length(mass_center) ^ 2 / vec2_length(dog_vector), 	vec2_angle(dog_vector) + math.pi)
			
			} else {
				# if no sheep is visible, we juste escape the dog
				escape_dog = vec2_new_polar( 1, 	vec2_angle(dog_vector) + math.pi)
			}
			log("escape_dog x:", escape_dog.x, " y: ", escape_dog.y, " len: ", vec2_length(escape_dog))
			vec2_sum(direction, escape_dog)
		}

		if (vec2_length(obstacle_vector) != 0) {
			# and if dog s visible
			if (vec2_length(escape_dog) != 0) {
				# We compute a excape vector, of the opposite direction of the obstacle
				# we make sure that it will be twice a big as the dog vector
				escape_obs = vec2_new_polar(2 * vec2_length(escape_dog), 	vec2_angle(obstacle_vector) + (math.pi))
			
			} else {
				# if no dog is visible, we juste escape the dog
				escape_obs = vec2_new_polar( 1, 	vec2_angle(obstacle_vector) + (math.pi))
			}
			log("escape_obs x:", escape_obs.x, " y: ", escape_obs.y, " len: ", vec2_length(escape_obs))
			vec2_sum(direction, escape_obs)
		
		# if there is no obstacle, we go closer to the center of mass
		} else if (vec2_length(mass_center) != 0) {
			vec2_sum(direction, mass_center)
		}
		gotop(10.0, vec2_angle(direction))

	} else {
		random_move()
	}
	debug.rays.add(0,0,0, mass_center.x, mass_center.y, 0.0)
	debug.rays.add(255,0,0, escape_dog.x, escape_dog.y, 0.0)
	debug.rays.add(0,255,0, escape_obs.x, escape_obs.y, 0.0)
	debug.rays.add(0,0,255, direction.x, direction.y, 0.0)

	# log("___direction: x:", direction.x," y:", direction.y)
	
}

### Fonctions pour l'objectif ###
# Ne pas bouger
function zero() {   
	# Do not move
	goto(0.0,0.0) 
	# TODO voir les robots dans un cercle autour, les compter pour arreter la simu
	#onemeter = neighbors.filter(function(rid, data) {
	#	return data.distance < 100 })
	#if (onemeter.count() == 1) {
	#	set_leds(0,255,0)
	#}      
}


### Fonctionnement Global ###
# Executed at init time
function init() {
	# Local knowledge table
  	knowledge = {}
	#initialisation de l'objectif: celui ci sera TOUJOURS id 0
	objectif = swarm.create(0)
	objectif.select(id == 0)
	# On initialise 2 swarm (dog et sheep) pour différencier deux comportements
	dog = swarm.create(1)
	sheep = swarm.create(2)
	dog.select(id == 1 or id == 1100)
	sheep.select(id != 0 and id != 1)
}

# Executed every time step
function step() {

	# debug.print("test au dessus du robot")
	# debug.rays.add("255,255,255, x, y, z)
	debug.rays.clear()

	threshold = 150
	dog.exec(function() { d_move(threshold) })
	sheep.exec(function() { s_move(threshold) })
	
	
}

# Executed once when the robot (or the simulator) is reset.
function reset() {
}

# Execute at exit
function destroy() {
}
